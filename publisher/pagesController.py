import json
import logging
import requests
from urllib3.exceptions import InsecureRequestWarning
from requests.auth import HTTPBasicAuth
from config.getconfig import getConfig

CONFIG = getConfig()



# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

#   
# Function for create page with CONTENT
# 
def createPage(title, content, parentPageID, login, password):
 
    # descripe json query
    newPageJSONQueryString = """
    {
        "type": "page",
        "title": "DEFAULT PAGE TITLE",
        "ancestors": [
            {
            "id": 111
            }
        ],
        "space": {
            "key": "DEFAULT KEY"
        },
        "body": {
            "storage": {
                "value": "DEFAULT PAGE CONTENT",
                "representation": "storage"
            }
        }
    }
    """

    # load json from string
    newPagejsonQuery = json.loads(newPageJSONQueryString)
    
    # the key of Confluence space for content publishing
    newPagejsonQuery['space']['key'] = CONFIG["confluence_space"]

    # check of input of the ParentPageID 
    if parentPageID is None: 
        newPagejsonQuery['ancestors'][0]['id']  = CONFIG["counfluence_parent_page_id"] # this is the root of out pages tree
    else:
        newPagejsonQuery['ancestors'][0]['id'] = str(parentPageID) # this is the branch of our tree

    # add search pattern to the title for the ability to find and delete this page in the future
    newPagejsonQuery['title'] = title + "  " + str(CONFIG["confluence_search_pattern"])
    # add content if the page from the input parameter
    newPagejsonQuery['body']['storage']['value'] = "<p style=\"background-color:#e7be17;\">This page is autogenerated. Make changes in the GitHub repository: " + \
                                                    "<b><a href=\"https://github.com\">My project</a></b></p>" + content
    # TO DO "<p>This page is autogenerated. Make changes in the GilLab repository: <\p>" + 
    
    logging.info("Create new page: " + newPagejsonQuery['title'])
    logging.debug("with content: " + newPagejsonQuery['body']['storage']['value'])
    logging.debug(json.dumps(newPagejsonQuery, indent=4, sort_keys=True))

 
    # make call to create new page
    logging.debug("Calling URL: " + str(CONFIG["confluence_url"]) + "content/")

    response = requests.post(
    url=CONFIG["confluence_url"] + "content/", 
    json=newPagejsonQuery,
    auth=HTTPBasicAuth(login, password),
    verify=False)

    logging.debug(response.status_code)
    if response.status_code == 200:
        logging.info("Created successfully")
    logging.debug(json.dumps(json.loads(response.text), indent=4, sort_keys=True))

    # return new page id
    logging.debug("Returning created page id: " + json.loads(response.text)['id'])
    return json.loads(response.text)['id']


#   
# Function for searching pages with SEARCH TEST in the title
# 
def searchPages(login, password):
    # make call using Confluence query language
    # GET /rest/api/search?cql=text~%7B%22SEARCH%20PATTERN%22%7D+and+type=page+and+space=%2212345%22&limit=1000 HTTP/1.1" 200
    # "cqlQuery": "parent=301176119 and text~{\"SEARCH PATTERN\"} and type=page and space=\"12345\""

    logging.debug("Calling URL: " + str(CONFIG["confluence_url"]) + "search?cql=parent=" + str(CONFIG["counfluence_parent_page_id"]) + 
            "+and+text~{\"" + str(CONFIG["confluence_search_pattern"]) + 
            "\"}+and+type=page+and+space=\"" + 
            str(CONFIG["confluence_space"]) + 
            "\"&limit=1000")


    response = requests.get(
        url=str(CONFIG["confluence_url"]) + "search?cql=text~{\"" + str(CONFIG["confluence_search_pattern"]) + 
            "\"}+and+type=page+and+space=\"" + 
            str(CONFIG["confluence_space"]) + 
            "\"&limit=1000", 
        auth=HTTPBasicAuth(login, password),
        verify=False)


    logging.debug(response.status_code)
    logging.debug(json.dumps(json.loads(response.text), indent=4, sort_keys=True))

    # extract page's IDs from response JSON
    results = json.loads(response.text)
    foundPages = []

    for result in results['results']:
        foundPages.append(result['content']['id']) # add found page id
        logging.info("Found page: " + result['content']['id'] + " with title: " +  result['content']['title'])

    logging.debug("Found pages in space " + str(CONFIG["confluence_space"]) + " and parent page: " + 
        str(CONFIG["counfluence_parent_page_id"])+ " and search text: " + 
        str(CONFIG["confluence_search_pattern"])  +": " + str(foundPages))

    return foundPages


#
# Function for deleting pages
# 
def deletePages(pagesIDList, login, password):


    deletedPages = []


    for page in pagesIDList:
        logging.info("Delete page: " + str(page))
        logging.debug("Calling URL: " + str(CONFIG["confluence_url"]) + "content/" + str(page))
        response = requests.delete(
            url=str(CONFIG["confluence_url"]) + "content/" + str(page),
            auth=HTTPBasicAuth(login, password),
            verify=False)
        logging.debug("Delete status code: " + str(response.status_code))
        if response.status_code == 204:
            logging.info("Deleted successfully")

    return deletedPages

#   
# Function for attaching file
# 
def attachFile(pageIdForFileAttaching, attachedFile, login, password):
 
    # make call to attache fale to a page
    logging.debug("Calling URL: " + str(CONFIG["confluence_url"]) + "content/" + str(pageIdForFileAttaching) + "/child/attachment")

    attachedFileStructure = {'file': attachedFile}
    attachedValues = {'comment': 'file was attached by the script'}
    attachedHeader=  {"Accept": "application/json",
                        "X-Atlassian-Token": "nocheck"} # disable token check. Otherwise it will be 443 status code

    response = requests.post(
        url=CONFIG["confluence_url"] + "content/" + str(pageIdForFileAttaching) + "/child/attachment",
        files=attachedFileStructure,
        data=attachedValues,
        auth=HTTPBasicAuth(login, password),
        headers=attachedHeader,
        verify=False)

    logging.debug(response.status_code)
    if response.status_code == 200:
        logging.info("File was attached successfully")
        logging.debug(json.dumps(json.loads(response.text), indent=4, sort_keys=True))

        # return id of the attached file
        logging.debug("Returning attached file id: " + json.loads(response.text)['results'][0]['id'])
        return json.loads(response.text)['results'][0]['id']
    else:
        logging.error("File has not attached")
